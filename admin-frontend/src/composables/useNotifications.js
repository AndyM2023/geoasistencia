import { useNotificationStore } from '../stores/notifications'

/**
 * Composable para usar el sistema de notificaciones
 * Proporciona una API simplificada para mostrar notificaciones
 */
export function useNotifications() {
  const notificationStore = useNotificationStore()

  /**
   * Mostrar notificaci√≥n de √©xito
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showSuccess = (message, options = {}) => {
    return notificationStore.showSuccess(message, options)
  }

  /**
   * Mostrar notificaci√≥n de error
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showError = (message, options = {}) => {
    return notificationStore.showError(message, options)
  }

  /**
   * Mostrar notificaci√≥n de informaci√≥n
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showInfo = (message, options = {}) => {
    return notificationStore.showInfo(message, options)
  }

  /**
   * Mostrar notificaci√≥n de advertencia
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showWarning = (message, options = {}) => {
    return notificationStore.showWarning(message, options)
  }

  /**
   * Mostrar notificaci√≥n de carga
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showLoading = (message, options = {}) => {
    return notificationStore.showLoading(message, options)
  }

  /**
   * Mostrar notificaci√≥n personalizada
   * @param {string} type - Tipo de notificaci√≥n
   * @param {string} message - Mensaje principal
   * @param {Object} options - Opciones adicionales
   */
  const showNotification = (type, message, options = {}) => {
    return notificationStore.showNotification(type, message, options)
  }

  /**
   * Remover notificaci√≥n espec√≠fica
   * @param {number} id - ID de la notificaci√≥n
   */
  const removeNotification = (id) => {
    notificationStore.removeNotification(id)
  }

  /**
   * Limpiar todas las notificaciones
   */
  const clearAll = () => {
    notificationStore.clearAll()
  }

  /**
   * Limpiar notificaciones por tipo
   * @param {string} type - Tipo de notificaci√≥n
   */
  const clearByType = (type) => {
    notificationStore.clearByType(type)
  }

  /**
   * Verificar si hay notificaciones activas
   */
  const hasActiveNotifications = () => {
    return notificationStore.hasActiveNotifications()
  }

  /**
   * Obtener estad√≠sticas de notificaciones
   */
  const getStats = () => {
    return notificationStore.getStats()
  }

  /**
   * Mostrar notificaci√≥n de error de ubicaci√≥n
   * @param {Object} errorData - Datos del error de ubicaci√≥n
   */
  const showLocationError = (errorData) => {
    const { error_type, message, distance_meters, area_radius, area_name } = errorData
    
    let title = 'Error de Ubicaci√≥n'
    let details = null
    
    switch (error_type) {
      case 'location_out_of_range':
        title = 'üìç Ubicaci√≥n Fuera del √Årea'
        details = `Est√°s a ${distance_meters}m del centro del √°rea '${area_name}' (m√°ximo ${area_radius}m)`
        break
      case 'location_not_available':
        title = 'üìç Ubicaci√≥n No Disponible'
        details = 'No se pudo obtener tu ubicaci√≥n GPS'
        break
      case 'wrong_area_assignment':
        title = 'üè¢ √Årea Incorrecta'
        details = 'No tienes permisos para esta √°rea'
        break
      case 'area_inactive':
        title = 'üè¢ √Årea Inactiva'
        details = 'Esta √°rea no est√° disponible actualmente'
        break
      case 'invalid_coordinates':
        title = 'üìç Coordenadas Inv√°lidas'
        details = 'Las coordenadas obtenidas no son v√°lidas'
        break
      default:
        title = 'üìç Error de Ubicaci√≥n'
        details = message
    }
    
    return showError(message, {
      title,
      details,
      icon: 'mdi-map-marker-alert',
      duration: 12000, // 12 segundos para errores de ubicaci√≥n
      closable: true
    })
  }

  /**
   * Mostrar notificaci√≥n de √©xito de asistencia
   * @param {Object} attendanceData - Datos de la asistencia
   * @param {Object} locationInfo - Informaci√≥n de ubicaci√≥n
   */
  const showAttendanceSuccess = (attendanceData, locationInfo = null) => {
    const { action_type, employee_name } = attendanceData
    
    let title = '‚úÖ Asistencia Registrada'
    let message = ''
    let icon = 'mdi-check-circle'
    
    switch (action_type) {
      case 'entrada':
        title = '‚úÖ Entrada Registrada'
        message = `Entrada registrada exitosamente para ${employee_name}`
        icon = 'mdi-login'
        break
      case 'salida':
        title = '‚è∞ Salida Registrada'
        message = `Salida registrada exitosamente para ${employee_name}`
        icon = 'mdi-logout'
        break
      case 'completo':
        title = '‚ÑπÔ∏è Estado Completo'
        message = `${employee_name} ya tiene entrada y salida registradas para hoy`
        icon = 'mdi-information'
        break
      default:
        title = '‚úÖ Asistencia Registrada'
        message = `Asistencia registrada exitosamente para ${employee_name}`
    }
    
    // Agregar informaci√≥n de distancia si est√° disponible
    let details = null
    if (locationInfo?.distance_meters) {
      details = `Ubicaci√≥n verificada a ${locationInfo.distance_meters}m del centro del √°rea`
    }
    
    return showSuccess(message, {
      title,
      details,
      icon,
      duration: 8000
    })
  }

  /**
   * Mostrar notificaci√≥n de progreso de c√°mara
   * @param {string} status - Estado de la c√°mara
   */
  const showCameraStatus = (status) => {
    // Limpiar notificaciones de c√°mara anteriores antes de mostrar una nueva
    const { clearByType } = useNotifications()
    clearByType('info') // Las notificaciones de c√°mara son de tipo 'info'
    
    switch (status) {
      case 'starting':
        return showLoading('üé¨ Iniciando c√°mara...', {
          title: 'C√°mara',
          icon: 'mdi-camera',
          autoHide: false,
          closable: false,
          duration: 15000 // 15 segundos m√°ximo para evitar que se atasque
        })
      case 'active':
        return showInfo('üìπ C√°mara activa', {
          title: 'C√°mara',
          icon: 'mdi-camera',
          duration: 3000
        })
      case 'error':
        return showError('‚ùå Error en la c√°mara', {
          title: 'C√°mara',
          icon: 'mdi-camera-off',
          duration: 8000
        })
      default:
        return showInfo(status, {
          title: 'C√°mara',
          icon: 'mdi-camera'
        })
    }
  }

  /**
   * Mostrar notificaci√≥n de ubicaci√≥n con limpieza autom√°tica
   * @param {string} status - Estado de la ubicaci√≥n
   */
  const showLocationStatus = (status) => {
    // Limpiar notificaciones de ubicaci√≥n anteriores
    const { clearByType } = useNotifications()
    clearByType('info')
    
    switch (status) {
      case 'getting':
        return showLoading('üìç Obteniendo tu ubicaci√≥n GPS...', {
          title: 'Ubicaci√≥n',
          icon: 'mdi-map-marker',
          autoHide: false,
          closable: false,
          duration: 20000 // 20 segundos m√°ximo
        })
      case 'success':
        return showInfo('üìç Ubicaci√≥n obtenida correctamente', {
          title: 'Ubicaci√≥n',
          icon: 'mdi-map-marker',
          duration: 4000
        })
      case 'error':
        return showError('‚ùå Error obteniendo ubicaci√≥n', {
          title: 'Ubicaci√≥n',
          icon: 'mdi-map-marker-alert',
          duration: 8000
        })
      default:
        return showInfo(status, {
          title: 'Ubicaci√≥n',
          icon: 'mdi-map-marker'
        })
    }
  }

  return {
    // M√©todos principales
    showSuccess,
    showError,
    showInfo,
    showWarning,
    showLoading,
    showNotification,
    
    // M√©todos de gesti√≥n
    removeNotification,
    clearAll,
    clearByType,
    hasActiveNotifications,
    getStats,
    
    // M√©todos especializados
    showLocationError,
    showAttendanceSuccess,
    showCameraStatus,
    showLocationStatus
  }
}

export default useNotifications
